# This file is auto-generated by OpenAPI Python Client.
# Do not edit manually.

from http import HTTPStatus
from typing import Any

import httpx

from ... import errors
from ...client import AuthenticatedClient, Client
from ...models.action_schema_out import ActionSchemaOut
from ...models.http_validation_error import HTTPValidationError
from ...types import UNSET, Response, Unset


def _get_kwargs(
    account: str,
    identifier: str,
    *,
    expiration_days: Unset | int = 7,
    s3_file_name: None | Unset | str = UNSET,
) -> dict[str, Any]:
    params: dict[str, Any] = {}

    params["expiration_days"] = expiration_days

    json_s3_file_name: None | Unset | str
    if isinstance(s3_file_name, Unset):
        json_s3_file_name = UNSET
    else:
        json_s3_file_name = s3_file_name
    params["s3_file_name"] = json_s3_file_name

    params = {k: v for k, v in params.items() if v is not UNSET and v is not None}

    _kwargs: dict[str, Any] = {
        "method": "post",
        "url": f"/api/v1/external-resource/rds-logs/{account}/{identifier}",
        "params": params,
    }

    return _kwargs


def _parse_response(
    *, client: AuthenticatedClient | Client, response: httpx.Response
) -> ActionSchemaOut | HTTPValidationError | None:
    if response.status_code == 202:
        response_202 = ActionSchemaOut.from_dict(response.json())

        return response_202
    if response.status_code == 422:
        response_422 = HTTPValidationError.from_dict(response.json())

        return response_422
    if client.raise_on_unexpected_status:
        raise errors.UnexpectedStatus(response.status_code, response.content)
    else:
        return None


def _build_response(
    *, client: AuthenticatedClient | Client, response: httpx.Response
) -> Response[ActionSchemaOut | HTTPValidationError]:
    return Response(
        status_code=HTTPStatus(response.status_code),
        content=response.content,
        headers=response.headers,
        parsed=_parse_response(client=client, response=response),
    )


def sync_detailed(
    account: str,
    identifier: str,
    *,
    client: AuthenticatedClient | Client,
    expiration_days: Unset | int = 7,
    s3_file_name: None | Unset | str = UNSET,
) -> Response[ActionSchemaOut | HTTPValidationError]:
    """External Resource Rds Logs

     Get RDS logs for an instance.

    This action retrieves logs from a specified RDS instance in a given AWS account and stores them in
    an S3 bucket.

    Args:
        account (str): AWS account name
        identifier (str): RDS instance identifier
        expiration_days (Union[Unset, int]): Expiration time in days Default: 7.
        s3_file_name (Union[None, Unset, str]): The S3 target file name. Defaults to
            '{account}-{identifier}.zip' if not provided.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ActionSchemaOut, HTTPValidationError]]
    """

    kwargs = _get_kwargs(
        account=account,
        identifier=identifier,
        expiration_days=expiration_days,
        s3_file_name=s3_file_name,
    )

    with client as _client:
        response = _client.request(
            **kwargs,
        )

    return _build_response(client=client, response=response)


def sync(
    account: str,
    identifier: str,
    *,
    client: AuthenticatedClient | Client,
    expiration_days: Unset | int = 7,
    s3_file_name: None | Unset | str = UNSET,
) -> ActionSchemaOut | HTTPValidationError | None:
    """External Resource Rds Logs

     Get RDS logs for an instance.

    This action retrieves logs from a specified RDS instance in a given AWS account and stores them in
    an S3 bucket.

    Args:
        account (str): AWS account name
        identifier (str): RDS instance identifier
        expiration_days (Union[Unset, int]): Expiration time in days Default: 7.
        s3_file_name (Union[None, Unset, str]): The S3 target file name. Defaults to
            '{account}-{identifier}.zip' if not provided.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ActionSchemaOut, HTTPValidationError]
    """

    return sync_detailed(
        account=account,
        identifier=identifier,
        client=client,
        expiration_days=expiration_days,
        s3_file_name=s3_file_name,
    ).parsed


async def asyncio_detailed(
    account: str,
    identifier: str,
    *,
    client: AuthenticatedClient | Client,
    expiration_days: Unset | int = 7,
    s3_file_name: None | Unset | str = UNSET,
) -> Response[ActionSchemaOut | HTTPValidationError]:
    """External Resource Rds Logs

     Get RDS logs for an instance.

    This action retrieves logs from a specified RDS instance in a given AWS account and stores them in
    an S3 bucket.

    Args:
        account (str): AWS account name
        identifier (str): RDS instance identifier
        expiration_days (Union[Unset, int]): Expiration time in days Default: 7.
        s3_file_name (Union[None, Unset, str]): The S3 target file name. Defaults to
            '{account}-{identifier}.zip' if not provided.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ActionSchemaOut, HTTPValidationError]]
    """

    kwargs = _get_kwargs(
        account=account,
        identifier=identifier,
        expiration_days=expiration_days,
        s3_file_name=s3_file_name,
    )

    async with client as _client:
        response = await _client.request(
            **kwargs,
        )

    return _build_response(client=client, response=response)


async def asyncio(
    account: str,
    identifier: str,
    *,
    client: AuthenticatedClient | Client,
    expiration_days: Unset | int = 7,
    s3_file_name: None | Unset | str = UNSET,
) -> ActionSchemaOut | HTTPValidationError | None:
    """External Resource Rds Logs

     Get RDS logs for an instance.

    This action retrieves logs from a specified RDS instance in a given AWS account and stores them in
    an S3 bucket.

    Args:
        account (str): AWS account name
        identifier (str): RDS instance identifier
        expiration_days (Union[Unset, int]): Expiration time in days Default: 7.
        s3_file_name (Union[None, Unset, str]): The S3 target file name. Defaults to
            '{account}-{identifier}.zip' if not provided.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ActionSchemaOut, HTTPValidationError]
    """

    return (
        await asyncio_detailed(
            account=account,
            identifier=identifier,
            client=client,
            expiration_days=expiration_days,
            s3_file_name=s3_file_name,
        )
    ).parsed


from typing import Annotated

import typer

app = typer.Typer()


@app.command(
    help="""Get RDS logs for an instance.

This action retrieves logs from a specified RDS instance in a given AWS account and stores them in an S3 bucket.""",
    rich_help_panel="Actions",
)
def external_resource_rds_logs(
    ctx: typer.Context,
    account: Annotated[str, typer.Option(help="AWS account name", show_default=False)],
    identifier: Annotated[
        str, typer.Option(help="RDS instance identifier", show_default=False)
    ],
    expiration_days: Annotated[int, typer.Option(help="Expiration time in days")] = 7,
    s3_file_name: Annotated[
        None | str,
        typer.Option(
            help="The S3 target file name. Defaults to '{account}-{identifier}.zip' if not provided."
        ),
    ] = None,
) -> None:
    result = sync(
        account=account,
        identifier=identifier,
        expiration_days=expiration_days,
        s3_file_name=s3_file_name,
        client=ctx.obj["client"],
    )
    if "formatter" in ctx.obj and result is not None:
        output: Any = result
        if isinstance(result, list):
            output = [
                item.to_dict() if hasattr(item, "to_dict") else item for item in result
            ]
        elif hasattr(result, "to_dict"):
            output = result.to_dict()
        ctx.obj["formatter"](output)
