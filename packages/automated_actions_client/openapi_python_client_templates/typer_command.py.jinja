import datetime
from typing import Annotated

import typer
app = typer.Typer()


{% if parsed_responses %}
@app.command(
    help="""{{ endpoint.description }}""",
    rich_help_panel="{{ endpoint.tags[0].title() if endpoint.tags else 'General' }}",
)
def {{endpoint.name | replace("-", "_") }}(
    ctx: typer.Context,

{# required fields from path and query_params #}
{% for parameter in endpoint.path_parameters + endpoint.query_parameters if parameter.required %}
    {{ parameter.python_name }}: Annotated[{{parameter.get_type_string(no_optional=True, quoted=True)}},
        typer.Option(help="{{parameter.description or ''}}", show_default=False)],
{% endfor %}

{# required fields from body #}
{% for body in endpoint.bodies %}
    {% for model in openapi.models if model.class_info.name == body.prop.get_type_string() %}
        {% for prop in model.required_properties %}
            {{ prop.name }}: Annotated[{{ prop.get_type_string(no_optional=True, quoted=True) }}, typer.Option(help="{{ prop.description or '' }}")],
        {% endfor %}
    {% endfor %}
{% endfor %}

{# optional fields from body #}
{% for body in endpoint.bodies %}
    {% for model in openapi.models if model.class_info.name == body.prop.get_type_string() %}
        {% for prop in model.optional_properties %}
            {{ prop.name }}: Annotated[{{ prop.get_type_string(no_optional=True, quoted=True) }}, typer.Option(help="{{ prop.description or '' }}") ] {% if prop.default %} ={{prop.default.python_code}}{% endif %},
        {% endfor %}
    {% endfor %}
{% endfor %}


{# optional fields from path and query_params #}
{% for parameter in endpoint.path_parameters + endpoint.query_parameters if not parameter.required %}
    {{ parameter.python_name }}: Annotated[{{parameter.get_type_string(no_optional=True, quoted=True)}},
    typer.Option(help="{{parameter.description or ''}}") ]  = {% if parameter.default %}{{parameter.default.python_code}}{% else %}None{% endif %},
{% endfor %}

) -> None:
    result = sync(
        {% for parameter in endpoint.path_parameters %}
            {{ parameter.python_name }}={{ parameter.python_name }},
        {% endfor %}

        {% for parameter in endpoint.query_parameters %}
            {{ parameter.python_name }}={{ parameter.python_name }},
        {% endfor %}

        {% for body in endpoint.bodies %}
            {% for model in openapi.models if model.class_info.name == body.prop.get_type_string() %}
                body= {{ model.class_info.name }}(
                    {% for prop in model.required_properties + model.optional_properties %}
                        {{ prop.name }}={{ prop.name }},
                    {% endfor %}
                ),
            {% endfor %}
        {% endfor %}

        client=ctx.obj["client"]
    )
    if "formatter" in ctx.obj and result is not None:
        output: Any = result
        if isinstance(result, list):
            output = [
                item.to_dict() if hasattr(item, "to_dict") else item for item in result
            ]
        elif hasattr(result, "to_dict"):
            output = result.to_dict()
        ctx.obj["formatter"](output)

{% endif %}
